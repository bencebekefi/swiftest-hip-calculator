@page "/hipcalc"

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6 col-lg-5">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h3 class="text-center mb-4">Hip Roof Length Calculator</h3>

                    <div class="form-group mb-3">
                        <label>Building Width (m):</label>
                        <input type="number" @bind="Width" class="form-control" />
                    </div>

                    <div class="form-group mb-3">
                        <label>Roof Span (m):</label>
                        <input type="number" @bind="Run" class="form-control" />
                    </div>

                    <div class="form-group mb-3">
                        <label>Main Roof Pitch (°):</label>
                        <input type="number" @bind="FrontBackPitch" class="form-control" />
                    </div>

                    <div class="form-group mb-3">
                        <label>Hip-End Pitch (°):</label>
                        <input type="number" @bind="HipEndPitch" class="form-control" />
                    </div>

                    <button class="btn btn-primary w-100" @onclick="CalculateHipLength">Calculate</button>

                    @if (HipLength > 0)
                    {
                        <div class="alert alert-success mt-4 text-center">
                            <strong>Hip Length:</strong> @($"{HipLength:F2} m")
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private double Width;
    private double Run;
    private double FrontBackPitch;
    private double HipEndPitch;
    private double HipLength;

    private void CalculateHipLength()
    {
        double halfWidth = Width / 2;
        double rise = Run * Math.Tan(DegreesToRadians(FrontBackPitch));

        // 3D Pythagorean to calculate the hip rafter
        HipLength = Math.Sqrt(Math.Pow(halfWidth, 2) + Math.Pow(Run, 2) + Math.Pow(rise, 2));
    }

    private double DegreesToRadians(double degrees) => degrees * (Math.PI / 180);
}
